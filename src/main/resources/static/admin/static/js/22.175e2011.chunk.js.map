{"version":3,"file":"static/js/22.175e2011.chunk.js","mappings":"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","sources":["api/client.js","components/OkModal.js","styles/BusinessJobmanager.js","pages/businessPages/JobManagerList.js","api/jobmanagerAxios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getCookie, removeCookie, setCookie } from \"./cookie\";\r\n\r\nconst client = axios.create({\r\n  baseURL: \"/api\",\r\n  withXSRFToken: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// const setAuthHeader = () => {\r\n//   const accessToken = getCookie(\"accessToken\");\r\n//   if (accessToken) {\r\n//     client.defaults.headers.common[\"Authorization\"] = `Bearer ${accessToken}`;\r\n//   } else {\r\n//     delete client.defaults.headers.common[\"Authorization\"];\r\n//   }\r\n// };\r\n\r\n// 요청 인터셉터 설정\r\nclient.interceptors.request.use(\r\n  async config => {\r\n    const accessToken = getCookie(\"accessToken\");\r\n    if (accessToken) {\r\n      config.headers.Authorization = `Bearer ${accessToken}`;\r\n      if (!config.headers) {\r\n        config.headers = {};\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n// 응답 인터셉터 설정\r\nclient.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  async error => {\r\n    const { config, response } = error;\r\n    const refreshToken = getCookie(\"refreshToken\");\r\n    if (response?.status === 401 && refreshToken) {\r\n      try {\r\n        const { data } = await client.post(`/sign/refresh-token`, {\r\n          refreshToken,\r\n        });\r\n        const accessToken = data;\r\n        setCookie(\"accessToken\", accessToken);\r\n        if (config?.headers && config.headers?.Authorization) {\r\n          config.headers.Authorization = `Bearer ${accessToken}`;\r\n          const retryResponse = await client(config);\r\n          return retryResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(\"토큰 갱신 실패:\", error);\r\n      }\r\n    }\r\n    console.error(\"요청 실패:\", error);\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n// client.interceptors.response.use(\r\n//   response => {\r\n//     return response;\r\n//   },\r\n//   async error => {\r\n//     const originalRequest = error.config;\r\n//     const refreshToken = getCookie(\"refreshToken\");\r\n//     if (error.response.status === 401 && refreshToken) {\r\n//       try {\r\n//         const response = await client.post(`/sign/refresh-token`, {\r\n//           refreshToken,\r\n//         });\r\n//         const accessToken = response.data;\r\n//         setCookie(\"accessToken\", accessToken);\r\n//         setAuthHeader();\r\n//         return client(originalRequest);\r\n//       } catch (error) {\r\n//         console.error(\"토큰 갱신 실패:\", error);\r\n//         removeAuth();\r\n//         return Promise.reject(error);\r\n//       }\r\n//     }\r\n//     console.error(\"요청 실패:\", error);\r\n//     return Promise.reject(error);\r\n//   },\r\n// );\r\n\r\n// 로그인 함수\r\nexport const fetchLogin = async (userId, password, setErrorCancelInfo) => {\r\n  try {\r\n    const res = await client.post(`/sign/sign-in`, {\r\n      email: userId,\r\n      pw: password,\r\n    });\r\n    const { role, refreshToken, accessToken, vo, accessTokenTime } =\r\n      await res.data;\r\n    if (role && refreshToken && accessToken) {\r\n      setCookie(\"refreshToken\", refreshToken);\r\n      setCookie(\"accessToken\", accessToken);\r\n      setErrorCancelInfo(\"\");\r\n      return { role, accessToken, refreshToken, vo, accessTokenTime };\r\n    } else {\r\n      throw new Error(\"잘못된 응답 형식\");\r\n    }\r\n  } catch (error) {\r\n    handleLoginError(error, setErrorCancelInfo);\r\n  }\r\n};\r\n\r\n// 토큰삭제 함수\r\nconst removeAuth = () => {\r\n  removeCookie(\"accessToken\");\r\n  removeCookie(\"refreshToken\");\r\n  delete client.defaults.headers.common[\"Authorization\"];\r\n};\r\n\r\n// 로그아웃 함수\r\nexport const postLogout = async () => {\r\n  try {\r\n    await client.post(\"/sign/logout\");\r\n    removeAuth();\r\n  } catch (error) {\r\n    console.error(\"로그아웃 실패:\", error);\r\n  }\r\n};\r\n\r\n// 예외처리 함수\r\nconst handleLoginError = (error, setErrorCancelInfo) => {\r\n  if (error.response.status === 432) {\r\n    setErrorCancelInfo(\"아이디를 확인 해 주세요\");\r\n  } else if (error.response.status === 434) {\r\n    setErrorCancelInfo(\"비밀번호를 확인 해 주세요\");\r\n  } else if (error.response.status === 435) {\r\n    setErrorCancelInfo(\"권한이 없습니다. 담당자에게 문의 바랍니다.\");\r\n  } else if (error.response.status === 500) {\r\n    setErrorCancelInfo(\"서버 오류 입니다.\");\r\n  }\r\n  throw new Error(\"로그인에 실패했습니다.\");\r\n};\r\n\r\nexport default client;\r\n","import React from \"react\";\r\nimport { ConfirmModalWarp, ModalOkBtn } from \"../styles/GlobalStyle\";\r\n\r\nconst OkModal = ({ header, open, close, onConfirm, children }) => {\r\n  console.log(\"오케이 모달 작동됩니다\");\r\n  const stopPropagation = e => {\r\n    e.stopPropagation();\r\n  };\r\n  return (\r\n    <ConfirmModalWarp onClick={close}>\r\n      <div className={open ? \"openConfirmModal Confimmodal\" : \"Confirmmodal\"}>\r\n        {open ? (\r\n          <div\r\n            className=\"modalConfirm-wrapper\"\r\n            onClick={e => stopPropagation(e)}\r\n          >\r\n            {/* 헤더내용 */}\r\n            <div className=\"modal-header\">\r\n              {header}\r\n              <p className=\"close\" onClick={close}>\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/assets/btn_menu_close.png`}\r\n                  alt=\"X\"\r\n                />\r\n              </p>\r\n            </div>\r\n            {/* 모달내용(컴포넌트 읽어오는부분) */}\r\n            <div className=\"modalConfirm-content\">\r\n              {children}\r\n              <div>\r\n                <ModalOkBtn onClick={onConfirm}>확인</ModalOkBtn>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </ConfirmModalWarp>\r\n  );\r\n};\r\n\r\nexport default OkModal;\r\n","import styled from \"@emotion/styled\";\r\nimport { Maincolor } from \"./GlobalStyle\";\r\n\r\nexport const JobManagerBoxWrap = styled.div`\r\n  /* padding: 40px; */\r\n  & > h2 {\r\n    color: ${Maincolor.black};\r\n    font-size: 24px;\r\n    font-weight: 700;\r\n    margin-bottom: 40px;\r\n    margin-top: 20px;\r\n  }\r\n  .jobmanager-content {\r\n    width: 1400px;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    gap: 40px;\r\n    .manager-profile {\r\n      width: 440px;\r\n      height: 543px;\r\n      border-radius: 12px;\r\n      border: 1px ${Maincolor.grayLight2} solid;\r\n      padding: 40px;\r\n      .manager-img {\r\n        width: 170px;\r\n        height: 226px;\r\n        object-fit: contain;\r\n        margin-bottom: 25px;\r\n      }\r\n\r\n      .manager-details {\r\n        /* 담당자 한마디 */\r\n        font-weight: 500;\r\n        .manager-word {\r\n          font-size: 20px;\r\n          color: ${Maincolor.black};\r\n          margin-bottom: 14px;\r\n        }\r\n        /* 담당자 이름 */\r\n        .manager-name {\r\n          font-size: 16px;\r\n          margin-top: 14px;\r\n        }\r\n        /* 담당자 연락처 */\r\n        .manager-contact {\r\n          margin-top: 52px;\r\n          li {\r\n            display: flex;\r\n            justify-content: left;\r\n            align-items: center;\r\n            margin-top: 16px;\r\n            span:nth-of-type(1) {\r\n              width: 60px;\r\n              font-size: 14px;\r\n              font-weight: 700;\r\n              margin-right: 10px;\r\n            }\r\n            span:nth-of-type(2) {\r\n              font-weight: 400;\r\n              font-size: 16px;\r\n              letter-spacing: -0.24px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { JobManagerBoxWrap } from \"../../styles/BusinessJobmanager\";\r\nimport NoImage from \"../../assets/NoImage.jpg\";\r\nimport { getJobManagerInfo } from \"../../api/jobmanagerAxios\";\r\nimport OkModal from \"../../components/OkModal\";\r\n\r\nconst JobManagerList = () => {\r\n  const [mngProfiledata, setmngProflieData] = useState([]);\r\n  const [nothing, setNothing] = useState(false);\r\n\r\n  // api 오류 메세지 받아오는 state.\r\n  const [apiErrorModalOpen, setApiErrorModalOpen] = useState(false);\r\n  const [errorApiInfo, setErrorApiInfo] = useState(\"\");\r\n\r\n  // 이미지 없을 때 error처리\r\n  const onImgError = e => {\r\n    e.target.src = NoImage;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobManagerInfo({ setmngProflieData, setNothing, setErrorApiInfo });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (errorApiInfo) {\r\n      setApiErrorModalOpen(true);\r\n    } else {\r\n      setApiErrorModalOpen(false);\r\n    }\r\n  }, [errorApiInfo]);\r\n  return (\r\n    <JobManagerBoxWrap>\r\n      <h2>취업담당자 안내</h2>\r\n      <div className=\"jobmanager-content\">\r\n        {mngProfiledata?.map(item => (\r\n          <div className=\"manager-profile\" key={item.iemply}>\r\n            <img\r\n              // src={`/home/download/Employee/${item.iemply}/${item.profilePic}`}\r\n              src={`${item.profilePic}`}\r\n              alt=\"job manager\"\r\n              onError={onImgError}\r\n              className=\"manager-img\"\r\n            />\r\n            <div className=\"manager-details\">\r\n              <p className=\"manager-word\">{item.oneWord}</p>\r\n              <p className=\"manager-name\">{item.name} 취업지원실장</p>\r\n              <ul className=\"manager-contact\">\r\n                <li>\r\n                  <span>상담전화</span>\r\n                  <span>{item.counselingNumber}</span>\r\n                </li>\r\n                <li>\r\n                  <span>모바일</span>\r\n                  <span>{item.phoneNumber}</span>\r\n                </li>\r\n                <li>\r\n                  <span>이메일</span>\r\n                  <span>{item.email}</span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {nothing && <div>취업담당자의 정보가 없습니다.</div>}\r\n\r\n      {/* api 에러 확인모달 */}\r\n      {apiErrorModalOpen && (\r\n        <OkModal\r\n          header={\"\"}\r\n          open={apiErrorModalOpen}\r\n          close={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorApiInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </JobManagerBoxWrap>\r\n  );\r\n};\r\n\r\nexport default JobManagerList;\r\n","import client from \"../api/client\";\r\n\r\nexport const getJobManagerInfo = async ({\r\n  setmngProflieData,\r\n  setNothing,\r\n  setErrorApiInfo,\r\n}) => {\r\n  try {\r\n    const res = await client.get(`/company/employee`);\r\n    const result = await res.data;\r\n\r\n    console.log(\"job mng 정보 들어옴\", result);\r\n    setmngProflieData(result);\r\n    setNothing(false);\r\n    if (result.length === 0) {\r\n      setNothing(true);\r\n      console.log(\"결과 없어요\");\r\n    }\r\n    return result;\r\n  } catch (error) {\r\n    setErrorApiInfo(`JobManager Info: ${error.message}`);\r\n  }\r\n};\r\n"],"names":["client","axios","create","baseURL","withXSRFToken","headers","interceptors","request","use","async","accessToken","getCookie","config","Authorization","concat","error","Promise","reject","response","refreshToken","status","_config$headers","data","post","setCookie","console","log","fetchLogin","userId","password","setErrorCancelInfo","res","email","pw","role","vo","accessTokenTime","Error","handleLoginError","postLogout","removeCookie","defaults","common","_ref","header","open","close","onConfirm","children","_jsx","ConfirmModalWarp","onClick","className","_jsxs","e","stopPropagation","src","process","alt","ModalOkBtn","JobManagerBoxWrap","styled","div","_templateObject","_taggedTemplateLiteral","Maincolor","black","grayLight2","JobManagerList","mngProfiledata","setmngProflieData","useState","nothing","setNothing","apiErrorModalOpen","setApiErrorModalOpen","errorApiInfo","setErrorApiInfo","onImgError","target","NoImage","useEffect","get","result","length","message","getJobManagerInfo","map","item","profilePic","onError","oneWord","name","counselingNumber","phoneNumber","iemply","OkModal"],"sourceRoot":""}