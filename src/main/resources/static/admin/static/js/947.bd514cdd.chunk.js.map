{"version":3,"file":"static/js/947.bd514cdd.chunk.js","mappings":"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","sources":["styles/LoginStyle.js","pages/Login.js"],"sourcesContent":["import styled from \"@emotion/styled\";\r\nimport { Maincolor } from \"./GlobalStyle\";\r\n\r\nexport const LoginWrap = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const LoginInner = styled.ul`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  li {\r\n    :first-of-type {\r\n      width: 50%;\r\n      height: 100vh;\r\n      img {\r\n        width: 100%;\r\n        height: 100vh;\r\n      }\r\n    }\r\n    :last-of-type {\r\n      display: flex;\r\n      justify-content: flex-end;\r\n      align-items: center;\r\n      flex-direction: column;\r\n      gap: 30px;\r\n      margin-right: 12.5%;\r\n      .login-title {\r\n        padding-left: 65px;\r\n      }\r\n      form {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        gap: 25px;\r\n        div {\r\n          width: 100%;\r\n          display: flex;\r\n          justify-content: flex-end;\r\n          align-items: center;\r\n          gap: 20px;\r\n          font-weight: 600;\r\n          input {\r\n            width: 440px;\r\n            height: 40px;\r\n            border: 1px solid black;\r\n            border-radius: 6px;\r\n            padding: 0 5px;\r\n          }\r\n          button {\r\n            width: 440px;\r\n            height: 50px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            color: ${Maincolor.white};\r\n            background: ${Maincolor.admintxt};\r\n            border: 1px solid ${Maincolor.admintxt};\r\n            border-radius: 6px;\r\n            cursor: pointer;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { LoginInner, LoginWrap } from \"../styles/LoginStyle\";\r\nimport { fetchLogin, getLoginPic, postLogout } from \"../api/client\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { AuthStateAtom } from \"../recoil/atoms/AuthState\";\r\nimport OkModal from \"../components/OkModal\";\r\n\r\nconst Login = () => {\r\n  const [adminId, setAdmminId] = useState(\"greendg01\");\r\n  const [password, setPassword] = useState(\"green1234\");\r\n  const [loginPic, setLoginPic] = useState(\"\");\r\n  const [errmsg, setErrMsg] = useState(false);\r\n\r\n  // 로그인 오류 메세지 받아오는 state.\r\n  const [errorModalOpen, setErrorModalOpen] = useState(false);\r\n  const [errorCancelInfo, setErrorCancelInfo] = useState(\"\");\r\n\r\n  const [authState, setAuthState] = useRecoilState(AuthStateAtom);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleLoginId = e => {\r\n    setAdmminId(e.target.value);\r\n  };\r\n\r\n  const handleLoginPass = e => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async e => {\r\n    e.preventDefault();\r\n    if (!adminId) {\r\n      setErrorCancelInfo(\"아이디를 입력 해 주세요.\");\r\n      return;\r\n    } else if (!password) {\r\n      setErrorCancelInfo(\"비밀번호를 입력 해 주세요.\");\r\n      return;\r\n    } else {\r\n      try {\r\n        const { role, accessToken, refreshToken, id, name, accessTokenTime } =\r\n          await fetchLogin(adminId, password, setErrorCancelInfo);\r\n        if (role === \"ROLE_ADMIN\" && accessToken) {\r\n          setAuthState({\r\n            isLogin: true,\r\n            accessToken: accessToken,\r\n            role: role,\r\n            id: id,\r\n            name: name,\r\n          });\r\n          navigate(\"/admin/home\");\r\n\r\n          setTimeout(() => {\r\n            if (refreshToken) {\r\n              postLogout(accessToken, refreshToken);\r\n              setAuthState({\r\n                isLogin: false,\r\n                accessToken: null,\r\n                role: \"\",\r\n                id: \"\",\r\n                name: \"\",\r\n              });\r\n              navigate(\"/admin/\");\r\n            }\r\n          }, accessTokenTime);\r\n          console.log(accessTokenTime / 1000);\r\n        } else {\r\n          navigate(\"/admin/\");\r\n        }\r\n      } catch (error) {\r\n        setErrorCancelInfo(error);\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getLoginPic(setLoginPic);\r\n    if (errorCancelInfo) {\r\n      setErrorModalOpen(true);\r\n    } else {\r\n      setErrorModalOpen(false);\r\n    }\r\n  }, [errorCancelInfo]);\r\n\r\n  return (\r\n    <LoginWrap>\r\n      <LoginInner>\r\n        <li>\r\n          <img src={`https://greenjobgo.kr${loginPic}`} alt=\"LoginImage\" />\r\n        </li>\r\n        <li>\r\n          <div className=\"login-title\">\r\n            <img src=\"../../assets/LoginTitle.png\" alt=\"LoginTitle\" />\r\n          </div>\r\n          <form>\r\n            <div>\r\n              <label htmlFor=\"login-id\">아이디</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"login-id\"\r\n                placeholder=\"아이디를 입력해주세요.\"\r\n                value={adminId}\r\n                onChange={e => handleLoginId(e)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"login-password\">비밀번호</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"login-password\"\r\n                placeholder=\"비밀번호를 입력해주세요.\"\r\n                value={password}\r\n                onChange={e => handleLoginPass(e)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <button onClick={handleSubmit}>로그인</button>\r\n            </div>\r\n          </form>\r\n        </li>\r\n      </LoginInner>\r\n      {/* api 에러 확인모달 */}\r\n      {errorModalOpen && (\r\n        <OkModal\r\n          header={\"\"}\r\n          open={errorModalOpen}\r\n          close={() => {\r\n            setErrorModalOpen(false), setErrorCancelInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setErrorModalOpen(false), setErrorCancelInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorCancelInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </LoginWrap>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["LoginWrap","styled","div","_templateObject","_taggedTemplateLiteral","LoginInner","ul","_templateObject2","Maincolor","white","admintxt","Login","adminId","setAdmminId","useState","password","setPassword","loginPic","setLoginPic","errmsg","setErrMsg","errorModalOpen","setErrorModalOpen","errorCancelInfo","setErrorCancelInfo","authState","setAuthState","useRecoilState","AuthStateAtom","navigate","useNavigate","useEffect","getLoginPic","_jsxs","children","_jsx","src","concat","alt","className","htmlFor","type","id","placeholder","value","onChange","e","target","handleLoginId","handleLoginPass","onClick","async","preventDefault","role","accessToken","refreshToken","name","accessTokenTime","fetchLogin","isLogin","setTimeout","postLogout","console","log","error","OkModal","header","open","close","onConfirm"],"sourceRoot":""}