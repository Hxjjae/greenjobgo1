{"version":3,"file":"static/js/207.652518e0.chunk.js","mappings":"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","sources":["api/portfolioAxios.js","styles/PortfolioStyle.js","components/portfolioMng/PFsearch.js","components/portfolioMng/PortfolioContent.js","components/portfolioMng/PortfolioPaging.js","components/portfolioMng/PortfolioSection.js","components/portfolioMng/SaveItemCheckbox.js","components/portfolioMng/SaveItemBox.js","components/portfolioMng/SaveItemContent.js","components/portfolioMng/SaveItemSearch.js","components/portfolioMng/SaveItemPaging.js","components/portfolioMng/SaveItemSection.js","pages/PortfolioMgmt.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js"],"sourcesContent":["import { client } from \"./client\";\r\n\r\n//  대분류 카테고리 불러오기\r\nexport const getBigcate = async (setCategory, setErrorApiInfo) => {\r\n  console.log(\"카테정보 불러옵니다\");\r\n\r\n  try {\r\n    const res = await client.get(`/admin/category`);\r\n    const result = await res.data;\r\n    setCategory(result);\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorApiInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorApiInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorApiInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n\r\n// 포트폴리오 리스트 불러오기\r\nexport const getPortFolioList = async ({\r\n  setStudentPFList,\r\n  page,\r\n  setCount,\r\n  resultUrl,\r\n  setNothing,\r\n  setErrorApiInfo,\r\n}) => {\r\n  // console.log(\"query들어오냐 ㅋ \", resultUrl);\r\n\r\n  try {\r\n    const res = await client.get(\r\n      `/admin/student/portfolio?page=${page}&size=10&${resultUrl}`,\r\n    );\r\n\r\n    const result = await res.data;\r\n    setStudentPFList(result);\r\n    setCount(result.page.idx);\r\n    setNothing(false);\r\n    if (result.res.length === 0) {\r\n      setNothing(true);\r\n    }\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorApiInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorApiInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorApiInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n\r\n// 보관함으로 보내거나 취소하기\r\nexport const patchSendSaved = async ({\r\n  savedItemNum,\r\n  isSaved,\r\n  setErrorInfo,\r\n  setErrorApiInfo,\r\n}) => {\r\n  try {\r\n    const res = await client.patch(\r\n      `/admin/student/storage?istudent=${savedItemNum}&storageYn=${isSaved}`,\r\n    );\r\n    const result = res.data;\r\n    console.log(\"보관함 patchㅋ\", result);\r\n\r\n    isSaved === 1\r\n      ? setErrorInfo(\"보관함 이동이 완료되었습니다.\")\r\n      : isSaved === 0\r\n        ? setErrorInfo(\"보관함 취소가 완료되었습니다.\")\r\n        : null;\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorApiInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorApiInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorApiInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n\r\n// 보관함 리스트를 불러오자\r\nexport const getSavedPFList = async ({\r\n  setSavedPFList,\r\n  page,\r\n  setCount,\r\n  resultUrl,\r\n  setNothing,\r\n  setErrorApiInfo,\r\n}) => {\r\n  try {\r\n    const res = await client.get(\r\n      `/admin/student/storage?page=${page}&size=10&sort=istudent%2CASC${resultUrl}`,\r\n    );\r\n\r\n    const result = await res.data;\r\n    console.log(\"보관함 리스트\", res.config.url);\r\n    setSavedPFList(result);\r\n    setCount(result.page.idx);\r\n    setNothing(false);\r\n    if (result.res.length === 0) {\r\n      setNothing(true);\r\n      // console.log(\"결과 없어요\");\r\n    }\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorApiInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorApiInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorApiInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n\r\n// 메인 보내기\r\nexport const patchSendMain = async ({ clickItems, mainYn, setErrorInfo }) => {\r\n  try {\r\n    const queryString = clickItems.map(item => `istudent=${item}`).join(\"&\");\r\n    const res = await client.patch(\r\n      `/admin/student/main?${queryString}&companyMainYn=${mainYn}`,\r\n    );\r\n    const result = await res.data;\r\n    setErrorInfo(\"메인 포트폴리오 설정이 완료되었습니다.\");\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n// 메인 취소\r\nexport const patchCancelMain = async ({\r\n  query,\r\n  mainYn,\r\n  setErrorCancelInfo,\r\n}) => {\r\n  try {\r\n    const res = await client.patch(\r\n      `/admin/student/main?${query}&companyMainYn=${mainYn}`,\r\n    );\r\n    const result = await res.data;\r\n    console.log(\"메인취소patch성공\", result.url);\r\n    setErrorCancelInfo(\"메인 포트폴리오 설정이 취소되었습니다.\");\r\n    return result;\r\n  } catch (error) {\r\n    const { response } = error;\r\n    const { status } = response;\r\n    if (response) {\r\n      switch (status) {\r\n        case 500:\r\n          setErrorCancelInfo(`[${status}Error] 서버 내부 오류`);\r\n          break;\r\n        case 401:\r\n          setErrorCancelInfo(\r\n            `[${status}Error] 로그인 시간이 만료되었습니다. 로그아웃 후 재접속 해주세요.`,\r\n          );\r\n          break;\r\n        default:\r\n          setErrorCancelInfo(\"네트워크 오류 또는 서버 응답이 없습니다.\");\r\n      }\r\n    } else {\r\n      throw new Error(\"Network Error\");\r\n    }\r\n  }\r\n};\r\n","import styled from \"@emotion/styled\";\r\nimport { Maincolor, ellipsis } from \"./GlobalStyle\";\r\n\r\n// 레이아웃 구성\r\nexport const PortFolioPage = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: left;\r\n  margin: 30px;\r\n  /* 탭버튼 커스텀 */\r\n  .tab-button {\r\n    width: 163px;\r\n    height: 46px;\r\n    background: ${Maincolor.white};\r\n    border: 1px solid #d0d0d0;\r\n    cursor: pointer;\r\n    border-bottom: 1px solid ${Maincolor.grayDeep};\r\n    border-radius: 6px 6px 0px 0px;\r\n\r\n    &.active {\r\n      border-top: 1px solid ${Maincolor.grayDeep};\r\n      border-right: 1px solid ${Maincolor.grayDeep};\r\n      border-bottom: 1px solid ${Maincolor.white};\r\n      border-left: 1px solid ${Maincolor.grayDeep};\r\n    }\r\n  }\r\n  /* 검색바 윗쪽 라인 */\r\n  .search-upper-line {\r\n    position: absolute;\r\n    top: 45px;\r\n    left: 325px;\r\n    width: 1260px;\r\n    height: 1px;\r\n    border-top: 1px solid ${Maincolor.grayDeep};\r\n  }\r\n  /* 내용 섹션 */\r\n  .content-wrap {\r\n    position: absolute;\r\n    top: 44px;\r\n    left: 0;\r\n    width: 1620px;\r\n    height: 30px;\r\n  }\r\n`;\r\n\r\n// 검색바 스타일\r\nexport const PfSearchWrap = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: relative;\r\n  width: 1266px;\r\n  min-width: 1266px;\r\n  height: 100px;\r\n  border-radius: 12px;\r\n  background: ${Maincolor.search};\r\n  margin-top: 30px;\r\n  .student-portfolio-search {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 20px;\r\n    margin: 30px 0;\r\n    label {\r\n      font-size: 16px;\r\n      font-weight: 500;\r\n      line-height: 140%;\r\n      letter-spacing: -0.64px;\r\n      margin-right: 18px;\r\n      margin-left: 30px;\r\n    }\r\n    li > select {\r\n      border: 1px solid ${Maincolor.input};\r\n      width: 154px;\r\n      height: 40px;\r\n      padding: 8px 12px;\r\n      align-items: center;\r\n      gap: 10px;\r\n    }\r\n    li > div > input {\r\n      width: 215px;\r\n      height: 40px;\r\n      border: 1px solid ${Maincolor.input};\r\n      border-radius: 5px;\r\n      padding: 8px 12px;\r\n    }\r\n    li > button {\r\n      margin-left: 120px;\r\n      width: 180px;\r\n      height: 50px;\r\n    }\r\n    /* select창 화살표 커스텀 */\r\n    .select-wrap {\r\n      background: linear-gradient(\r\n        to right,\r\n        ${Maincolor.search} 33.5%,\r\n        ${Maincolor.white} 33.5%\r\n      );\r\n      select {\r\n        -o-appearance: none;\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n        background: url(${process.env.PUBLIC_URL}/assets/Arrowdown.png)\r\n          no-repeat calc(100% - 12px) 50%/11px auto;\r\n        padding: 0 28px 0 10px;\r\n        border-radius: 0;\r\n      }\r\n      select::-ms-expand {\r\n        display: none;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// 포트폴리오 페이지 스타일\r\nexport const PortFolioContentWrap = styled.div`\r\n  position: relative;\r\n  width: 1600px;\r\n  /* height: 630px; */\r\n  height: 550px;\r\n  padding: 20px 0 0 0;\r\n  display: flex;\r\n  justify-content: left;\r\n  /* align-items: center; */\r\n  flex-wrap: wrap;\r\n  gap: 30px;\r\n\r\n  .pf-box {\r\n    width: 294px;\r\n    height: 251px;\r\n    /* margin: 10px 0; */\r\n    .pf-img,\r\n    .saved-img {\r\n      position: relative;\r\n      margin-bottom: 15px;\r\n      img {\r\n        width: 294px;\r\n        height: 185px;\r\n        object-fit: cover;\r\n      }\r\n      /* 리스트 썸네일 우측 아이콘 */\r\n      .thumb-right {\r\n        position: absolute;\r\n        top: 0px;\r\n        right: 0px;\r\n\r\n        /* 보관중인 포트폴리오 아이콘*/\r\n        .save-icon {\r\n          font-size: 25px;\r\n          /* color: ${Maincolor.white}; */\r\n        }\r\n        /* 취업자 아이콘 */\r\n        .job-yes-icon {\r\n          margin: 15px;\r\n          width: 25px;\r\n          height: 25px;\r\n          object-fit: contain;\r\n        }\r\n      }\r\n    }\r\n\r\n    /* 보관함 -> 저장된 이미지 */\r\n    .saved-img {\r\n      position: relative;\r\n      margin-bottom: 15px;\r\n      & > img {\r\n        width: 294px;\r\n        height: 185px;\r\n        object-fit: cover;\r\n      }\r\n      .isMainDim {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        width: 294px;\r\n        height: 185px;\r\n        background: rgba(0, 0, 0, 0.3);\r\n      }\r\n    }\r\n\r\n    /* 포트폴리오 정보 */\r\n    & > ul,\r\n    .side-info {\r\n      position: relative;\r\n      .pf-name {\r\n        width: 120px;\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        letter-spacing: -0.24px;\r\n        margin-bottom: 5px;\r\n        ${ellipsis.one}\r\n      }\r\n      .pf-subject {\r\n        width: 290px;\r\n        color: ${Maincolor.grayDeep};\r\n        font-size: 16px;\r\n        font-weight: 400;\r\n        letter-spacing: -0.24px;\r\n        ${ellipsis.one}\r\n      }\r\n      /* 보관함에 있는 포트폴리오 하트 */\r\n      .isSaved-name-right {\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        width: 20px;\r\n        color: #ff6262;\r\n        & > svg {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /* 포트폴리오리스트 -> 마우스 호버 */\r\n  .pf-box:hover .pf-img-hover {\r\n    display: block;\r\n    z-index: 99;\r\n  }\r\n\r\n  .pf-img-hover {\r\n    display: none;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 294px;\r\n    height: 60px;\r\n    background: rgba(0, 0, 0, 0.3);\r\n    z-index: 99;\r\n    .savedGo-btn,\r\n    .isSaved-btn {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      height: 100%;\r\n      font-size: 25px;\r\n      padding: 5px;\r\n      cursor: pointer;\r\n    }\r\n    // 보관함으로 보내요 버튼\r\n    .savedGo-btn {\r\n      color: ${Maincolor.white};\r\n    }\r\n    .isSaved-btn {\r\n      color: ${Maincolor.red};\r\n    }\r\n  }\r\n`;\r\n\r\n// 메인으로 보내는 체크박스 style\r\nexport const CheckToMainSt = styled.div`\r\n  .Saved-infoWrap {\r\n    width: 294px;\r\n    display: flex;\r\n    justify-content: left;\r\n    .main-checked {\r\n      line-height: 2;\r\n      margin-right: 8px;\r\n      > li > input {\r\n        width: 17px;\r\n        height: 17px;\r\n        text-align: center;\r\n      }\r\n    }\r\n    .side-info {\r\n      position: relative;\r\n      .pf-subject {\r\n        width: 257px;\r\n        ${ellipsis.one}\r\n      }\r\n      /* 보관함에 있는 포트폴리오 하트 */\r\n      .isSaved-name-right {\r\n        position: absolute;\r\n        top: 0;\r\n        right: -10px;\r\n        width: 20px;\r\n        color: ${Maincolor.red};\r\n        cursor: pointer;\r\n        & > svg {\r\n          font-size: 16px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GoMainBtnSty = styled.div`\r\n  /* 메인으로 보내는 버튼 */\r\n  .GoMainGo {\r\n    position: absolute;\r\n    top: 80px;\r\n    left: 1360px;\r\n    width: 225px;\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    letter-spacing: -0.24px;\r\n    background: ${Maincolor.admintxt};\r\n  }\r\n`;\r\n\r\n// 검색결과가 없어요\r\nexport const NothingData = styled.div`\r\n  width: 80vw;\r\n  height: 50vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  p {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { PfSearchWrap } from \"../../styles/PortfolioStyle\";\r\nimport { BtnGlobal } from \"../../styles/GlobalStyle\";\r\nimport { getBigcate } from \"../../api/portfolioAxios\";\r\n\r\nconst PFsearch = ({\r\n  handleSearchClick,\r\n  selectCate,\r\n  setSelectCate,\r\n  searchsubj,\r\n  setSearchSubj,\r\n  searchname,\r\n  setSearchname,\r\n  setErrorApiInfo,\r\n}) => {\r\n  const [category, setCategory] = useState([]);\r\n\r\n  // 카테변경값 저장\r\n  const handleCategoryFilter = e => {\r\n    console.log(\"필터변경e\", e.target.value);\r\n    setSelectCate(e.target.value);\r\n    setSearchSubj(\"\");\r\n    setSearchname(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBigcate(setCategory, setErrorApiInfo);\r\n  }, []);\r\n\r\n  return (\r\n    <PfSearchWrap>\r\n      <ul className=\"student-portfolio-search\">\r\n        <li className=\"select-wrap\">\r\n          <label htmlFor=\"category-select\">직종</label>\r\n          <select\r\n            value={selectCate}\r\n            id=\"category-select\"\r\n            onChange={e => handleCategoryFilter(e)}\r\n          >\r\n            <option value=\"\" defaultValue>\r\n              전체\r\n            </option>\r\n            {category.length && category.map(item => (\r\n              <option\r\n                key={`cate${item.iclassification}`}\r\n                value={item.iclassification}\r\n              >\r\n                {item.classification}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </li>\r\n        <li>\r\n          <div className=\"subjectname-form\">\r\n            <label htmlFor=\"subject-state\">과정명</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"subject-state\"\r\n              value={searchsubj}\r\n              onChange={e => setSearchSubj(e.target.value)}\r\n              onKeyDown={e => {\r\n                if (e.key === \"Enter\") {\r\n                  handleSearchClick();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <div className=\"studentname-form\">\r\n            <label htmlFor=\"student-state\">수강생 이름</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"student-state\"\r\n              value={searchname}\r\n              onChange={e => setSearchname(e.target.value)}\r\n              onKeyDown={e => {\r\n                if (e.key === \"Enter\") {\r\n                  handleSearchClick();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </li>\r\n        <li>\r\n          <BtnGlobal\r\n            onClick={handleSearchClick}\r\n            style={{ background: \"#6d6d6d\" }}\r\n          >\r\n            조회\r\n          </BtnGlobal>\r\n        </li>\r\n      </ul>\r\n    </PfSearchWrap>\r\n  );\r\n};\r\n\r\nexport default PFsearch;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart as solidHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeart as regularHeart } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { patchSendSaved } from \"../../api/portfolioAxios\";\r\nimport NoImage from \"../../assets/NoImage.jpg\";\r\nimport ConfirmModal from \"../ConfirmModal\";\r\nimport OkModal from \"../OkModal\";\r\n\r\nconst PortfolioContent = ({ item, setPage, fetchData, setErrorApiInfo }) => {\r\n  const [savedItemNum, setSavedItemNum] = useState(\"\");\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [cancelModalOpen, setCancelModalOpen] = useState(false);\r\n  const [isSaved, setIsSaved] = useState();\r\n\r\n  const [errorModalOpen, setErrorModalOpen] = useState(false);\r\n  const [errorInfo, setErrorInfo] = useState(\"\");\r\n  // 이미지 없을 때 error처리\r\n  const onImgError = e => {\r\n    e.target.src = NoImage;\r\n  };\r\n\r\n  // 보관함으로 보낸다\r\n  const handleSaveSend = item => {\r\n    setSavedItemNum(item);\r\n    setModalOpen(true);\r\n  };\r\n  // 보관 컨펌\r\n  const handleConfirm = async () => {\r\n    try {\r\n      await patchSendSaved({\r\n        savedItemNum,\r\n        isSaved: 1,\r\n        setErrorInfo,\r\n        setErrorApiInfo,\r\n      });\r\n      fetchData();\r\n      await setModalOpen(false);\r\n      setErrorModalOpen(true);\r\n    } catch (error) {\r\n      setErrorApiInfo(`Saved: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // 보관을 취소한다\r\n  const handleSaveCancel = item => {\r\n    setSavedItemNum(item);\r\n    setCancelModalOpen(true);\r\n  };\r\n  // 보관취소 컨펌\r\n  const handleCancelConfirm = async () => {\r\n    try {\r\n      await patchSendSaved({\r\n        savedItemNum,\r\n        isSaved: 0,\r\n        setErrorInfo,\r\n        setErrorApiInfo,\r\n      });\r\n      fetchData();\r\n      await setCancelModalOpen(false);\r\n      setErrorModalOpen(true);\r\n    } catch (error) {\r\n      setErrorModalOpen(true);\r\n    }\r\n  };\r\n  // api 요청 성공할 때 화면 리랜더링\r\n  // const updateData = async () => {\r\n  //   try {\r\n  //     const newData = await getPortFolioList({ setStudentPFList });\r\n  //   } catch (error) {\r\n  //     console.error(\"데이터 업데이트 에러:\", error);\r\n  //   }\r\n  // };\r\n  useEffect(() => {\r\n    if (errorInfo) {\r\n      setErrorModalOpen(true);\r\n      // fetchData();\r\n    } else {\r\n      setErrorModalOpen(false);\r\n    }\r\n  }, [errorInfo]);\r\n\r\n  return (\r\n    <div className=\"pf-box\">\r\n      <div className=\"pf-img\">\r\n        <div className=\"pf-img-hover\">\r\n          {item.storageYn === 0 ? (\r\n            <i\r\n              className=\"savedGo-btn\"\r\n              onClick={() => handleSaveSend(item.istudent)}\r\n            >\r\n              <FontAwesomeIcon icon={regularHeart} />\r\n            </i>\r\n          ) : item.storageYn === 1 ? (\r\n            <i\r\n              className=\"isSaved-btn\"\r\n              onClick={() => handleSaveCancel(item.istudent)}\r\n            >\r\n              <FontAwesomeIcon icon={solidHeart} />\r\n            </i>\r\n          ) : null}\r\n        </div>\r\n        <img src={`${item.img}`} alt={item.studentName} onError={onImgError} />\r\n        <ul className=\"thumb-right\">\r\n          {item.huntJobYn === 1 && (\r\n            <li>\r\n              <img\r\n                src={`${process.env.PUBLIC_URL}/assets/got-a-job.png`}\r\n                alt=\"got-a-job\"\r\n                className=\"job-yes-icon\"\r\n                onError={onImgError}\r\n              />\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <ul>\r\n        <li className=\"pf-name\">{item.studentName} 수강생</li>\r\n        <li className=\"pf-subject\">{item.subjectName}</li>\r\n        {item.storageYn === 1 ? (\r\n          <li className=\"isSaved-name-right\">\r\n            <FontAwesomeIcon icon={solidHeart} />\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n      {/* 보관확인모달 */}\r\n      {modalOpen && (\r\n        <ConfirmModal\r\n          open={modalOpen}\r\n          close={() => setModalOpen(false)}\r\n          onConfirm={handleConfirm}\r\n          onCancel={() => setModalOpen(false)}\r\n        >\r\n          <span>해당 포트폴리오를 보관 하시겠습니까?</span>\r\n        </ConfirmModal>\r\n      )}\r\n\r\n      {/* 보관취소모달 */}\r\n      {cancelModalOpen && (\r\n        <ConfirmModal\r\n          open={cancelModalOpen}\r\n          close={() => setCancelModalOpen(false)}\r\n          onConfirm={handleCancelConfirm}\r\n          onCancel={() => setCancelModalOpen(false)}\r\n        >\r\n          <span>해당 포트폴리오 보관을 취소 하시겠습니까?</span>\r\n        </ConfirmModal>\r\n      )}\r\n      {/* api 에러 확인모달 */}\r\n      {errorModalOpen && (\r\n        <OkModal\r\n          header={\"\"}\r\n          open={errorModalOpen}\r\n          close={() => {\r\n            setErrorModalOpen(false);\r\n            // fetchData();\r\n            setErrorInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setErrorModalOpen(false);\r\n            setErrorInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(PortfolioContent);\r\n","import Pagination from \"react-js-pagination\";\r\nimport { PortfolioPagingSty } from \"../../styles/portfoliopagingstyle\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faChevronLeft,\r\n  faChevronRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst PortfolioPaging = ({ page, setPage, count }) => {\r\n  console.log(\"page\", page);\r\n\r\n  return (\r\n    <PortfolioPagingSty>\r\n      <Pagination\r\n        activePage={page}\r\n        itemsCountPerPage={10}\r\n        totalItemsCount={count}\r\n        pageRangeDisplayed={10}\r\n        marginPagesDisplayed={0}\r\n        prevPageText={<FontAwesomeIcon icon={faChevronLeft} />}\r\n        nextPageText={<FontAwesomeIcon icon={faChevronRight} />}\r\n        firstPageText={\"\"}\r\n        lastPageText={\"\"}\r\n        onChange={setPage}\r\n      />\r\n    </PortfolioPagingSty>\r\n  );\r\n};\r\n\r\nexport default PortfolioPaging;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PFsearch from \"./PFsearch\";\r\nimport { getPortFolioList } from \"../../api/portfolioAxios\";\r\nimport PortfolioContent from \"./PortfolioContent\";\r\nimport PortfolioPaging from \"./PortfolioPaging\";\r\nimport { PortFolioContentWrap } from \"../../styles/PortfolioStyle\";\r\nimport NoListItem from \"../NoListItem\";\r\nimport ErrorModal from \"../ErrorModal\";\r\n\r\nconst PortfolioSection = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [studentPFList, setStudentPFList] = useState(\"\");\r\n  const [nothing, setNothing] = useState(false);\r\n  // const [queryAdd, setQueryAdd] = useState();\r\n  const [searchsubj, setSearchSubj] = useState(\"\");\r\n  const [searchname, setSearchname] = useState(\"\");\r\n  const [selectCate, setSelectCate] = useState(\"\");\r\n  const [searchCate, setSearchCate] = useState(\"\");\r\n  // api 오류 메세지 받아오는 state.\r\n  const [apiErrorModalOpen, setApiErrorModalOpen] = useState(false);\r\n  const [errorApiInfo, setErrorApiInfo] = useState(\"\");\r\n\r\n  // url을 만들자\r\n  const makeUrl = () => {\r\n    let query = \"\";\r\n\r\n    if (selectCate !== \"\") {\r\n      query += `iclassfication=${searchCate}&`;\r\n    }\r\n    if (searchsubj !== \"\") {\r\n      query += `subjectName=${searchsubj}&`;\r\n    }\r\n    if (searchname !== \"\") {\r\n      query += `studentName=${searchname}&`;\r\n    }\r\n    query = query ? query.slice(0, -1) : \"\";\r\n    return query;\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const resultUrl = makeUrl();\r\n    await getPortFolioList({\r\n      setStudentPFList,\r\n      page,\r\n      setCount,\r\n      resultUrl,\r\n      setNothing,\r\n      setErrorApiInfo,\r\n    });\r\n  };\r\n\r\n  // 검색버튼 클릭\r\n  const handleSearchClick = async () => {\r\n    setSearchCate(selectCate);\r\n    try {\r\n      setPage(1);\r\n      await fetchData();\r\n    } catch (error) {\r\n      console.error(\"데이터 가져오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchDataAndSearch = async () => {\r\n      try {\r\n        await fetchData();\r\n      } catch (error) {\r\n        console.error(\"데이터 가져오기 실패:\", error);\r\n      }\r\n    };\r\n  \r\n    if (page === 1) {\r\n      fetchDataAndSearch();\r\n    }\r\n  }, [page]);\r\n  // useEffect(() => {\r\n  //   fetchData();\r\n  // }, [page]);\r\n\r\n  useEffect(() => {\r\n    if (errorApiInfo) {\r\n      setApiErrorModalOpen(true);\r\n    } else {\r\n      setApiErrorModalOpen(false);\r\n    }\r\n  }, [errorApiInfo]);\r\n  return (\r\n    <div>\r\n      {/* 검색창 화면*/}\r\n      <PFsearch\r\n        handleSearchClick={handleSearchClick}\r\n        selectCate={selectCate}\r\n        setSelectCate={setSelectCate}\r\n        searchsubj={searchsubj}\r\n        setSearchSubj={setSearchSubj}\r\n        searchname={searchname}\r\n        setSearchname={setSearchname}\r\n        setErrorApiInfo={setErrorApiInfo}\r\n      />\r\n      {/* 포트폴리오 리스트 화면 */}\r\n      <PortFolioContentWrap>\r\n        {nothing && <NoListItem />}\r\n\r\n        {studentPFList?.res?.map(item => (\r\n          <PortfolioContent\r\n            key={`pk${item.istudent}`}\r\n            item={item}\r\n            studentPFList={studentPFList}\r\n            setPage={setPage}\r\n            nothing={nothing}\r\n            fetchData={fetchData}\r\n            setErrorApiInfo={setErrorApiInfo}\r\n          />\r\n        ))}\r\n      </PortFolioContentWrap>\r\n      {/* 페이지네이션 */}\r\n      <PortfolioPaging page={page} setPage={setPage} count={count} />\r\n      {/* api 에러 확인모달 */}\r\n      {apiErrorModalOpen && (\r\n        <ErrorModal\r\n          header={\"\"}\r\n          open={apiErrorModalOpen}\r\n          close={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorApiInfo}</span>\r\n        </ErrorModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PortfolioSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { faHeart as solidHeart } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { patchCancelMain, patchSendMain } from \"../../api/portfolioAxios\";\r\nimport ConfirmModal from \"../ConfirmModal\";\r\nimport OkModal from \"../OkModal\";\r\n\r\nconst SaveItemCheckbox = ({\r\n  item,\r\n  handleSaveCancel,\r\n  fetchData,\r\n  clickItems,\r\n  setClickItems,\r\n}) => {\r\n  const [mainCancelModalOpen, setMainCancelModalOpen] = useState(false);\r\n  const [cancelMakeQuery, setCancelMakeQuery] = useState(\"\");\r\n  const [errorModalOpen, setErrorModalOpen] = useState(false);\r\n  const [errorCancelInfo, setErrorCancelInfo] = useState(\"\");\r\n\r\n  // 체크박스 변경 이벤트 핸들러\r\n  const handleCheckBox = (checked, istudent) => {\r\n    setClickItems(prev => {\r\n      if (!checked && item.companyMainYn === 1) {\r\n        const query = `istudent=${istudent}`;\r\n        setCancelMakeQuery(query);\r\n      }\r\n\r\n      return checked\r\n        ? [...prev, istudent]\r\n        : prev.filter(item => item !== istudent);\r\n    });\r\n  };\r\n  // 메인적용하기 모달 취소버튼 클릭\r\n  const handleCancelReject = async () => {\r\n    setClickItems(prev => []);\r\n    // await fetchData();\r\n    setMainCancelModalOpen(false);\r\n  };\r\n\r\n  //  메인취소 확인\r\n  const handleMainCancelConfirm = async () => {\r\n    try {\r\n      await patchCancelMain({\r\n        query: cancelMakeQuery,\r\n        mainYn: 0,\r\n        setErrorCancelInfo,\r\n      });\r\n      await setMainCancelModalOpen(false);\r\n      setErrorModalOpen(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cancelMakeQuery) {\r\n      setMainCancelModalOpen(true);\r\n    }\r\n  }, [cancelMakeQuery]);\r\n\r\n  useEffect(() => {\r\n    if (errorCancelInfo) {\r\n      setErrorModalOpen(true);\r\n    } else {\r\n      setErrorModalOpen(false);\r\n    }\r\n  }, [errorCancelInfo]);\r\n\r\n  useEffect(() => {\r\n    setClickItems(prev => []);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"Saved-infoWrap\">\r\n      <ul className=\"main-checked\">\r\n        <li>\r\n          <input\r\n            type=\"checkbox\"\r\n            id={`check${item.istudent}`}\r\n            value={item.istudent}\r\n            checked={\r\n              item.companyMainYn === 1 || clickItems.includes(item.istudent)\r\n            }\r\n            onChange={e => {\r\n              handleCheckBox(e.target.checked, item.istudent);\r\n            }}\r\n          />\r\n        </li>\r\n      </ul>\r\n      <ul className=\"side-info\">\r\n        <li className=\"pf-name\">{item.studentName} 수강생</li>\r\n        <li className=\"pf-subject\">{item.subjectName}</li>\r\n        {item.storageYn === 1 ? (\r\n          <li\r\n            className=\"isSaved-name-right\"\r\n            onClick={() => handleSaveCancel(item.istudent)}\r\n          >\r\n            <FontAwesomeIcon icon={solidHeart} />\r\n          </li>\r\n        ) : null}\r\n      </ul>\r\n      {/* 메인취소모달 */}\r\n      {mainCancelModalOpen && (\r\n        <ConfirmModal\r\n          open={mainCancelModalOpen}\r\n          close={handleCancelReject}\r\n          onConfirm={handleMainCancelConfirm}\r\n          onCancel={handleCancelReject}\r\n        >\r\n          <span>메인 포트폴리오 설정을 취소 하시겠습니까?</span>\r\n        </ConfirmModal>\r\n      )}\r\n      {/* api 에러 확인모달 */}\r\n      {errorModalOpen && (\r\n        <OkModal\r\n          open={errorModalOpen}\r\n          close={() => {\r\n            setErrorModalOpen(false);\r\n            setErrorCancelInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setErrorModalOpen(false);\r\n            setErrorCancelInfo(\"\");\r\n            fetchData();\r\n          }}\r\n        >\r\n          <span>{errorCancelInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SaveItemCheckbox);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport NoImage from \"../../assets/NoImage.jpg\";\r\nimport { patchSendSaved } from \"../../api/portfolioAxios\";\r\nimport ConfirmModal from \"../ConfirmModal\";\r\nimport { CheckToMainSt } from \"../../styles/PortfolioStyle\";\r\nimport SaveItemCheckbox from \"./SaveItemCheckbox\";\r\nimport OkModal from \"../OkModal\";\r\n\r\n// // 메인클릭 정보 저장 recoil\r\n\r\nconst SaveItemBox = ({ item, fetchData, clickItems, setClickItems }) => {\r\n  const [savedItemNum, setSavedItemNum] = useState([]);\r\n  const [cancelModalOpen, setCancelModalOpen] = useState(false);\r\n  const [errorModalOpen, setErrorModalOpen] = useState(false);\r\n  const [errorInfo, setErrorInfo] = useState(\"\");\r\n\r\n  // 이미지 없을 때 error처리\r\n  const onImgError = e => {\r\n    e.target.src = NoImage;\r\n  };\r\n\r\n  // 보관을 취소한다\r\n  const handleSaveCancel = item => {\r\n    setSavedItemNum(item);\r\n    setCancelModalOpen(true);\r\n  };\r\n  // 보관취소 컨펌\r\n  const handleCancelConfirm = async () => {\r\n    try {\r\n      await patchSendSaved({\r\n        savedItemNum,\r\n        isSaved: 0,\r\n        setErrorInfo\r\n      });\r\n      setCancelModalOpen(false);\r\n    } catch (error) {\r\n      console.log(\"보관실패\", error);\r\n      setErrorModalOpen(true);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (errorInfo) {\r\n      setErrorModalOpen(true);\r\n    } else {\r\n      setErrorModalOpen(false);\r\n    }\r\n  }, [errorInfo]);\r\n\r\n  return (\r\n    <div className=\"pf-box\">\r\n      <div className=\"saved-img\">\r\n        <img src={`${item.img}`} alt={item.studentName} onError={onImgError} />\r\n        {item.companyMainYn === 1 ? <div className=\"isMainDim\"></div> : null}\r\n        <ul className=\"thumb-right\">\r\n          {item.huntJobYn === 1 && (\r\n            <li>\r\n              <img\r\n                src={`${process.env.PUBLIC_URL}/assets/got-a-job.png`}\r\n                alt=\"got-a-job\"\r\n                className=\"job-yes-icon\"\r\n                onError={onImgError}\r\n              />\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n      <CheckToMainSt>\r\n        <SaveItemCheckbox\r\n          item={item}\r\n          handleSaveCancel={handleSaveCancel}\r\n          fetchData={fetchData}\r\n          clickItems={clickItems}\r\n          setClickItems={setClickItems}\r\n        />\r\n      </CheckToMainSt>\r\n      {/* 보관취소모달 */}\r\n      {cancelModalOpen && (\r\n        <ConfirmModal\r\n          open={cancelModalOpen}\r\n          close={() => {\r\n            setCancelModalOpen(false);\r\n          }}\r\n          onConfirm={handleCancelConfirm}\r\n          onCancel={() => {\r\n            setCancelModalOpen(false);\r\n          }}\r\n        >\r\n          <span>해당 포트폴리오 보관을 취소 하시겠습니까?</span>\r\n        </ConfirmModal>\r\n      )}\r\n\r\n      {/* api 에러 확인모달 */}\r\n      {errorModalOpen && (\r\n        <OkModal\r\n          header={\"\"}\r\n          open={errorModalOpen}\r\n          close={() => {\r\n            setErrorModalOpen(false), setErrorInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setErrorModalOpen(false), setErrorInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SaveItemBox);\r\n","import React from \"react\";\r\nimport SaveItemBox from \"./SaveItemBox\";\r\nimport { PortFolioContentWrap } from \"../../styles/PortfolioStyle\";\r\nimport { selector, useRecoilValue } from \"recoil\";\r\nimport { savedListRecoil } from \"./SaveItemSection\";\r\nimport NoListItem from \"../NoListItem\";\r\nimport { v4 } from \"uuid\";\r\n\r\n// 선택된 필터정보 읽자\r\nexport const readsavedListItems = selector({\r\n  key: `readsavedListItems/${v4()}`,\r\n  // 값을 읽겠다\r\n  get: ({ get }) => {\r\n    const result = get(savedListRecoil);\r\n    return result;\r\n  },\r\n});\r\nconst SaveItemContent = ({ fetchData, nothing,\r\n  clickItems,\r\n  setClickItems, }) => {\r\n  // 보관함 리스트 recoil을 읽어오자\r\n  const savedListRead = useRecoilValue(readsavedListItems);\r\n\r\n  return (\r\n    <PortFolioContentWrap>\r\n      {nothing && <NoListItem />}\r\n\r\n      {savedListRead.res?.map(item => (\r\n        <SaveItemBox\r\n          key={`pk${item.istudent}`}\r\n          item={item}\r\n          fetchData={fetchData}\r\n          clickItems={clickItems}\r\n          setClickItems={setClickItems}\r\n        />\r\n      ))}\r\n    </PortFolioContentWrap>\r\n  );\r\n};\r\n\r\nexport default React.memo(SaveItemContent);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { GoMainBtnSty, PfSearchWrap } from \"../../styles/PortfolioStyle\";\r\nimport { BtnGlobal } from \"../../styles/GlobalStyle\";\r\nimport { getBigcate, patchSendMain } from \"../../api/portfolioAxios\";\r\nimport ConfirmModal from \"../ConfirmModal\";\r\nimport { selector, useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { clickMainRecoil } from \"./SaveItemCheckbox\";\r\nimport OkModal from \"../OkModal\";\r\nimport { readsavedListItems } from \"./SaveItemContent\";\r\n\r\nconst SaveItemSearch = ({\r\n  setPage,\r\n  selectCate,\r\n  setSelectCate,\r\n  searchsubj,\r\n  setSearchSubj,\r\n  searchname,\r\n  setSearchname,\r\n  handleSearchClick,\r\n  fetchData,\r\n  clickItems,\r\n  setClickItems,\r\n  setErrorApiInfo,\r\n}) => {\r\n  const [category, setCategory] = useState([]);\r\n\r\n  const [mainGoModalOpen, setMainGoModalOpen] = useState(false);\r\n  const [errorModalOpen, setErrorModalOpen] = useState(false);\r\n\r\n  const [mainYn, setMainYn] = useState(1);\r\n\r\n  const [errorInfo, setErrorInfo] = useState(\"\");\r\n  const savedListRead = useRecoilValue(readsavedListItems);\r\n\r\n  // 카테변경값 저장\r\n  const handleCategoryFilter = e => {\r\n    // setPage(1);\r\n    console.log(\"필터변경e\", e.target.value);\r\n    setSelectCate(e.target.value);\r\n    setSearchSubj(\"\");\r\n    setSearchname(\"\");\r\n  };\r\n\r\n  // 메인 포트폴리오 적용 버튼 클릭\r\n  const handleGoMain = () => {\r\n    if (clickItems.length === 0) {\r\n      setErrorInfo(\"메인 포트폴리오를 선택하세요.\");\r\n      return;\r\n    } else {\r\n      setMainGoModalOpen(true);\r\n    }\r\n  };\r\n  // 메인적용 확인\r\n  const handleMainConfirm = async () => {\r\n    try {\r\n      patchSendMain({\r\n        clickItems,\r\n        mainYn: 1,\r\n        setErrorInfo,\r\n      });\r\n      await setMainGoModalOpen(false);\r\n      // setPage(1);\r\n    } catch (error) {\r\n      console.log(\"보관실패\", error);\r\n    }\r\n  };\r\n\r\n  // 에러나서 취소될때 ok버튼\r\n  const handleErrorOK = () => {\r\n    setErrorModalOpen(false);\r\n    setErrorInfo(\"\");\r\n    fetchData();\r\n  };\r\n  const handleCancel = () => {\r\n    setClickItems([]);\r\n    setMainGoModalOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    getBigcate(setCategory, setErrorApiInfo);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (errorInfo) {\r\n      setErrorModalOpen(true);\r\n    } else {\r\n      setErrorModalOpen(false);\r\n    }\r\n  }, [errorInfo]);\r\n\r\n  return (\r\n    <div>\r\n      <PfSearchWrap>\r\n        <ul className=\"student-portfolio-search\">\r\n          <li className=\"select-wrap\">\r\n            <label htmlFor=\"category-select\">직종</label>\r\n            <select\r\n              value={selectCate}\r\n              id=\"category-select\"\r\n              onChange={e => handleCategoryFilter(e)}\r\n            >\r\n              <option value=\"\" defaultValue>\r\n                전체\r\n              </option>\r\n              {category?.map(item => (\r\n                <option\r\n                  key={`cate${item.iclassification}`}\r\n                  value={item.iclassification}\r\n                >\r\n                  {item.classification}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </li>\r\n          <li>\r\n            <div className=\"subjectname-form\">\r\n              <label htmlFor=\"subject-state-save\">과정명</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"subject-state-save\"\r\n                value={searchsubj}\r\n                onChange={e => setSearchSubj(e.target.value)}\r\n                onKeyDown={e => {\r\n                  if (e.key === \"Enter\") {\r\n                    handleSearchClick();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\"studentname-form\">\r\n              <label htmlFor=\"student-state-save\">수강생 이름</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"student-state-save\"\r\n                value={searchname}\r\n                onChange={e => setSearchname(e.target.value)}\r\n                onKeyDown={e => {\r\n                  if (e.key === \"Enter\") {\r\n                    handleSearchClick();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <BtnGlobal\r\n              onClick={handleSearchClick}\r\n              style={{ background: \"#6d6d6d\" }}\r\n            >\r\n              조회\r\n            </BtnGlobal>\r\n          </li>\r\n        </ul>\r\n      </PfSearchWrap>\r\n      <GoMainBtnSty>\r\n        <BtnGlobal className=\"GoMainGo\" onClick={handleGoMain}>\r\n          메인 포트폴리오 적용\r\n        </BtnGlobal>\r\n      </GoMainBtnSty>\r\n      {/* 메인설정확인 모달 */}\r\n      {mainGoModalOpen && (\r\n        <ConfirmModal\r\n          open={mainGoModalOpen}\r\n          close={handleCancel}\r\n          onConfirm={handleMainConfirm}\r\n          onCancel={handleCancel}\r\n        >\r\n          <span>메인 포트폴리오로 설정 하시겠습니까?</span>\r\n        </ConfirmModal>\r\n      )}\r\n      {/* api 에러 확인모달 */}\r\n      {errorModalOpen && (\r\n        <OkModal\r\n          open={errorModalOpen}\r\n          close={handleErrorOK}\r\n          onConfirm={handleErrorOK}\r\n        >\r\n          <span>{errorInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SaveItemSearch;\r\n","import Pagination from \"react-js-pagination\";\r\nimport { PortfolioPagingSty } from \"../../styles/portfoliopagingstyle\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faChevronLeft,\r\n  faChevronRight,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SaveItemPaging = ({ page, setPage, count }) => {\r\n  return (\r\n    <PortfolioPagingSty>\r\n      <Pagination\r\n        activePage={page}\r\n        itemsCountPerPage={10}\r\n        totalItemsCount={count}\r\n        pageRangeDisplayed={10}\r\n        marginPagesDisplayed={0}\r\n        prevPageText={<FontAwesomeIcon icon={faChevronLeft} />}\r\n        nextPageText={<FontAwesomeIcon icon={faChevronRight} />}\r\n        firstPageText={\"\"}\r\n        lastPageText={\"\"}\r\n        onChange={setPage}\r\n      />\r\n    </PortfolioPagingSty>\r\n  );\r\n};\r\n\r\nexport default SaveItemPaging;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getSavedPFList } from \"../../api/portfolioAxios\";\r\nimport SaveItemContent from \"./SaveItemContent\";\r\nimport SaveItemSearch from \"./SaveItemSearch\";\r\nimport SaveItemPaging from \"./SaveItemPaging\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\nimport { v4 } from \"uuid\";\r\nimport ErrorModal from \"../../components/ErrorModal\";\r\n\r\n// 보관함리스트 저장 recoil\r\nexport const savedListRecoil = atom({\r\n  key: `savedListRecoil/${v4()}`,\r\n  // key: `savedListRecoil`,\r\n  default: [],\r\n});\r\n\r\nconst SaveItemSection = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [nothing, setNothing] = useState(false);\r\n\r\n  const [searchsubj, setSearchSubj] = useState(\"\");\r\n  const [searchname, setSearchname] = useState(\"\");\r\n  const [selectCate, setSelectCate] = useState(\"\");\r\n\r\n  // 보관함 리스트 recoil\r\n  const [savedPFList, setSavedPFList] = useRecoilState(savedListRecoil);\r\n  // api 오류 메세지 받아오는 state.\r\n  const [apiErrorModalOpen, setApiErrorModalOpen] = useState(false);\r\n  const [errorApiInfo, setErrorApiInfo] = useState(\"\");\r\n\r\n  // 메인 보낼 list\r\n  const [clickItems, setClickItems] = useState([]);\r\n\r\n  // 쿼리 주소를 변환하자\r\n  const makeUrl = () => {\r\n    let query = \"\";\r\n\r\n    if (selectCate !== \"\") {\r\n      query += `&iclassfication=${selectCate}`;\r\n    }\r\n    if (searchsubj !== \"\") {\r\n      query += `&subjectName=${searchsubj}`;\r\n    }\r\n    if (searchname !== \"\") {\r\n      query += `&studentName=${searchname}`;\r\n    }\r\n    // query = query ? query.slice(0, -1) : \"\";\r\n    return query;\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    const resultUrl = makeUrl();\r\n    await getSavedPFList({\r\n      setSavedPFList,\r\n      page,\r\n      setCount,\r\n      resultUrl,\r\n      setNothing,\r\n      setErrorApiInfo,\r\n    });\r\n  };\r\n\r\n  // 검색버튼 클릭\r\n  const handleSearchClick = async () => {\r\n    try {\r\n      setPage(1);\r\n      await fetchData();\r\n    } catch (error) {\r\n      console.error(\"데이터 가져오기 실패:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    if (errorApiInfo) {\r\n      setApiErrorModalOpen(true);\r\n    } else {\r\n      setApiErrorModalOpen(false);\r\n    }\r\n  }, [errorApiInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {/* 검색화면 */}\r\n      <SaveItemSearch\r\n        handleSearchClick={handleSearchClick}\r\n        setPage={setPage}\r\n        selectCate={selectCate}\r\n        setSelectCate={setSelectCate}\r\n        searchsubj={searchsubj}\r\n        setSearchSubj={setSearchSubj}\r\n        searchname={searchname}\r\n        setSearchname={setSearchname}\r\n        fetchData={fetchData}\r\n        clickItems={clickItems}\r\n        setClickItems={setClickItems}\r\n        setErrorApiInfo={setErrorApiInfo}\r\n      />\r\n      {/* 보관함 리스트 화면 */}\r\n      <SaveItemContent\r\n        fetchData={fetchData}\r\n        nothing={nothing}\r\n        clickItems={clickItems}\r\n        setClickItems={setClickItems}\r\n      />\r\n      {/* 페이지네이션 */}\r\n      <SaveItemPaging page={page} setPage={setPage} count={count} />\r\n      {/* api 에러 확인모달 */}\r\n      {apiErrorModalOpen && (\r\n        <ErrorModal\r\n          header={\"\"}\r\n          open={apiErrorModalOpen}\r\n          close={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorApiInfo}</span>\r\n        </ErrorModal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SaveItemSection;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PortfolioSection from \"../components/portfolioMng/PortfolioSection\";\r\nimport SaveItemSection from \"../components/portfolioMng/SaveItemSection\";\r\nimport { PortFolioPage } from \"../styles/PortfolioStyle\";\r\n\r\nconst PortfolioMgmt = () => {\r\n  // 버튼 활성화 state\r\n  const [activeTab, setActiveTab] = useState(1);\r\n\r\n  const TabBtns = [\r\n    {\r\n      ibtn: 1,\r\n      name: \"포트폴리오 관리\",\r\n      component: <PortfolioSection />,\r\n    },\r\n    {\r\n      ibtn: 2,\r\n      name: \"보관함\",\r\n      component: <SaveItemSection />,\r\n    },\r\n  ];\r\n\r\n  const handleTabBtn = (_ibtn, e) => {\r\n    e.preventDefault();\r\n    setActiveTab(_ibtn);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // api get 요청 자리\r\n  }, [activeTab]);\r\n  return (\r\n    <PortFolioPage>\r\n      {TabBtns.map(item => (\r\n        <div key={item.ibtn}>\r\n          <ul>\r\n            <li>\r\n              <button\r\n                className={`${\r\n                  activeTab === item.ibtn ? \"active\" : \"\"\r\n                } tab-button`}\r\n                onClick={e => handleTabBtn(item.ibtn, e)}\r\n              >\r\n                {item.name}\r\n              </button>\r\n              <div className=\"search-upper-line\"></div>\r\n            </li>\r\n          </ul>\r\n          <div className=\"content-wrap\">\r\n            {activeTab === item.ibtn && item.component}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </PortFolioPage>\r\n  );\r\n};\r\n\r\nexport default PortfolioMgmt;\r\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"names":["getBigcate","async","setCategory","setErrorApiInfo","console","log","res","client","get","result","data","error","response","status","Error","concat","getPortFolioList","setStudentPFList","page","setCount","resultUrl","setNothing","_ref","idx","length","patchSendSaved","savedItemNum","isSaved","setErrorInfo","_ref2","patch","getSavedPFList","setSavedPFList","_ref3","config","url","patchSendMain","clickItems","mainYn","_ref4","queryString","map","item","join","patchCancelMain","query","setErrorCancelInfo","_ref5","PortFolioPage","styled","div","_templateObject","_taggedTemplateLiteral","Maincolor","white","grayDeep","PfSearchWrap","_templateObject2","search","input","process","PortFolioContentWrap","_templateObject3","ellipsis","one","red","CheckToMainSt","_templateObject4","GoMainBtnSty","_templateObject5","admintxt","_templateObject6","handleSearchClick","selectCate","setSelectCate","searchsubj","setSearchSubj","searchname","setSearchname","category","useState","useEffect","_jsx","children","_jsxs","className","htmlFor","value","id","onChange","e","target","handleCategoryFilter","defaultValue","iclassification","classification","type","onKeyDown","key","BtnGlobal","onClick","style","background","PortfolioContent","setPage","fetchData","setSavedItemNum","modalOpen","setModalOpen","cancelModalOpen","setCancelModalOpen","setIsSaved","errorModalOpen","setErrorModalOpen","errorInfo","onImgError","src","NoImage","storageYn","handleSaveSend","istudent","FontAwesomeIcon","icon","regularHeart","handleSaveCancel","solidHeart","img","alt","studentName","onError","huntJobYn","subjectName","ConfirmModal","open","close","onConfirm","message","onCancel","OkModal","header","React","count","PortfolioPagingSty","Pagination","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","marginPagesDisplayed","prevPageText","faChevronLeft","nextPageText","faChevronRight","firstPageText","lastPageText","PortfolioSection","_studentPFList$res","studentPFList","nothing","searchCate","setSearchCate","apiErrorModalOpen","setApiErrorModalOpen","errorApiInfo","makeUrl","slice","fetchDataAndSearch","PFsearch","NoListItem","PortfolioPaging","ErrorModal","SaveItemCheckbox","setClickItems","mainCancelModalOpen","setMainCancelModalOpen","cancelMakeQuery","setCancelMakeQuery","errorCancelInfo","handleCancelReject","prev","checked","companyMainYn","includes","handleCheckBox","filter","SaveItemBox","readsavedListItems","selector","v4","savedListRecoil","SaveItemContent","_savedListRead$res","savedListRead","useRecoilValue","mainGoModalOpen","setMainGoModalOpen","setMainYn","handleErrorOK","handleCancel","handleGoMain","atom","default","SaveItemSection","savedPFList","useRecoilState","SaveItemSearch","SaveItemPaging","PortfolioMgmt","activeTab","setActiveTab","TabBtns","ibtn","name","component","handleTabBtn","_ibtn","preventDefault","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","byteToHex","i","push","toString","unsafeStringify","arr","offset","arguments","undefined","options","buf","native","rnds","random"],"sourceRoot":""}