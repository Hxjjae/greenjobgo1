{"version":3,"file":"static/js/22.3b47ba16.chunk.js","mappings":"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","sources":["api/client.js","components/OkModal.js","styles/BusinessJobmanager.js","pages/businessPages/JobManagerList.js","api/jobmanagerAxios.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  getCookie,\r\n  removeCookie,\r\n  setAcessCookie,\r\n  setRefresCookie,\r\n} from \"./cookie\";\r\n\r\n// axios 인스턴스 생성\r\nexport const client = axios.create({\r\n  baseURL: \"/api\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// 요청 인터셉터 설정\r\nclient.interceptors.request.use(\r\n  async config => {\r\n    const token = getCookie(\"accessToken\");\r\n    if (token) {\r\n      console.log(\"액세스토큰\", token);\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n// 응답 인터셉터 설정\r\nclient.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  async error => {\r\n    const { config, response } = error;\r\n    const refreshToken = getCookie(\"refreshToken\");\r\n    console.log(\"리프레시토큰:\", refreshToken);\r\n    if (response?.status === 401 && refreshToken) {\r\n      console.log(\"리프레시토큰:\", refreshToken);\r\n      try {\r\n        const { data } = await client.post(`/sign/refresh-token`, {\r\n          refreshToken,\r\n        });\r\n        console.log(\"리프레시토큰:\", data);\r\n\r\n        const accessToken = data;\r\n        setAcessCookie(\"accessToken\", accessToken);\r\n\r\n        if (config?.headers && config.headers?.Authorization) {\r\n          config.headers.Authorization = `Bearer ${accessToken}`;\r\n          const retryResponse = await client(config);\r\n          return retryResponse;\r\n        }\r\n      } catch (error) {\r\n        console.log(\"토큰 갱신 실패:\", error);\r\n      }\r\n    }\r\n    console.error(\"요청 실패:\", error);\r\n    return Promise.reject(error);\r\n  },\r\n);\r\n\r\n// 로그인 함수\r\nexport const fetchLogin = async (userId, password, setErrorCancelInfo) => {\r\n  try {\r\n    const res = await client.post(`/sign/sign-in`, {\r\n      email: userId,\r\n      pw: password,\r\n    });\r\n\r\n    const { role, refreshToken, accessToken, vo, accessTokenTime } =\r\n      await res.data;\r\n\r\n    console.log(res.data);\r\n    if (role && refreshToken && accessToken) {\r\n      setRefresCookie(\"refreshToken\", refreshToken);\r\n\r\n      setAcessCookie(\"accessToken\", accessToken);\r\n\r\n      setErrorCancelInfo(\"\");\r\n\r\n      if (role === \"ROLE_USER\") {\r\n        return { role, accessToken, refreshToken, vo };\r\n      } else if (role === \"ROLE_COMPANY\") {\r\n        return {\r\n          role,\r\n          accessToken,\r\n          refreshToken,\r\n          vo,\r\n          accessTokenTime,\r\n        };\r\n      }\r\n    } else {\r\n      throw new Error(\"잘못된 응답 형식\");\r\n    }\r\n  } catch (error) {\r\n    if (error.response.status === 432) {\r\n      setErrorCancelInfo(\"아이디를 확인 해 주세요\");\r\n    }\r\n    if (error.response.status === 434) {\r\n      setErrorCancelInfo(\"비밀번호를 확인 해 주세요\");\r\n    }\r\n    if (error.response.status === 435) {\r\n      setErrorCancelInfo(\"권한이 없습니다. 담당자에게 문의 바랍니다.\");\r\n    }\r\n    if (error.response.status === 500) {\r\n      setErrorCancelInfo(\"서버 오류 입니다.\");\r\n    }\r\n    throw new Error(\"로그인에 실패했습니다.\");\r\n  }\r\n};\r\n\r\n// 로그아웃 함수\r\nexport const postLogout = async (accessToken, refreshToken) => {\r\n  try {\r\n    const res = await client.post(\"/sign/logout\");\r\n    removeCookie(accessToken);\r\n    removeCookie(refreshToken);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { ConfirmModalWarp, ModalOkBtn } from \"../styles/GlobalStyle\";\r\n\r\nconst OkModal = ({ header, open, close, onConfirm, children }) => {\r\n  console.log(\"오케이 모달 작동됩니다\");\r\n  const stopPropagation = e => {\r\n    e.stopPropagation();\r\n  };\r\n  return (\r\n    <ConfirmModalWarp onClick={close}>\r\n      <div className={open ? \"openConfirmModal Confimmodal\" : \"Confirmmodal\"}>\r\n        {open ? (\r\n          <div\r\n            className=\"modalConfirm-wrapper\"\r\n            onClick={e => stopPropagation(e)}\r\n          >\r\n            {/* 헤더내용 */}\r\n            <div className=\"modal-header\">\r\n              {header}\r\n              <p className=\"close\" onClick={close}>\r\n                <img\r\n                  src={`${process.env.PUBLIC_URL}/assets/btn_menu_close.png`}\r\n                  alt=\"X\"\r\n                />\r\n              </p>\r\n            </div>\r\n            {/* 모달내용(컴포넌트 읽어오는부분) */}\r\n            <div className=\"modalConfirm-content\">\r\n              {children}\r\n              <div>\r\n                <ModalOkBtn onClick={onConfirm}>확인</ModalOkBtn>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </ConfirmModalWarp>\r\n  );\r\n};\r\n\r\nexport default OkModal;\r\n","import styled from \"@emotion/styled\";\r\nimport { Maincolor } from \"./GlobalStyle\";\r\n\r\nexport const JobManagerBoxWrap = styled.div`\r\n  /* padding: 40px; */\r\n  & > h2 {\r\n    color: ${Maincolor.black};\r\n    font-size: 24px;\r\n    font-weight: 700;\r\n    margin-bottom: 40px;\r\n    margin-top: 20px;\r\n  }\r\n  .jobmanager-content {\r\n    width: 1400px;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    gap: 40px;\r\n    .manager-profile {\r\n      width: 440px;\r\n      height: 543px;\r\n      border-radius: 12px;\r\n      border: 1px ${Maincolor.grayLight2} solid;\r\n      padding: 40px;\r\n      .manager-img {\r\n        width: 170px;\r\n        height: 226px;\r\n        object-fit: contain;\r\n        margin-bottom: 25px;\r\n      }\r\n\r\n      .manager-details {\r\n        /* 담당자 한마디 */\r\n        font-weight: 500;\r\n        .manager-word {\r\n          font-size: 20px;\r\n          color: ${Maincolor.black};\r\n          margin-bottom: 14px;\r\n        }\r\n        /* 담당자 이름 */\r\n        .manager-name {\r\n          font-size: 16px;\r\n          margin-top: 14px;\r\n        }\r\n        /* 담당자 연락처 */\r\n        .manager-contact {\r\n          margin-top: 52px;\r\n          li {\r\n            display: flex;\r\n            justify-content: left;\r\n            align-items: center;\r\n            margin-top: 16px;\r\n            span:nth-of-type(1) {\r\n              width: 60px;\r\n              font-size: 14px;\r\n              font-weight: 700;\r\n              margin-right: 10px;\r\n            }\r\n            span:nth-of-type(2) {\r\n              font-weight: 400;\r\n              font-size: 16px;\r\n              letter-spacing: -0.24px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { JobManagerBoxWrap } from \"../../styles/BusinessJobmanager\";\r\nimport NoImage from \"../../assets/NoImage.jpg\";\r\nimport { getJobManagerInfo } from \"../../api/jobmanagerAxios\";\r\nimport OkModal from \"../../components/OkModal\";\r\n\r\nconst JobManagerList = () => {\r\n  const [mngProfiledata, setmngProflieData] = useState([]);\r\n  const [nothing, setNothing] = useState(false);\r\n\r\n  // api 오류 메세지 받아오는 state.\r\n  const [apiErrorModalOpen, setApiErrorModalOpen] = useState(false);\r\n  const [errorApiInfo, setErrorApiInfo] = useState(\"\");\r\n\r\n  // 이미지 없을 때 error처리\r\n  const onImgError = e => {\r\n    e.target.src = NoImage;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJobManagerInfo({ setmngProflieData, setNothing, setErrorApiInfo });\r\n  }, []);\r\n  useEffect(() => {\r\n    if (errorApiInfo) {\r\n      setApiErrorModalOpen(true);\r\n    } else {\r\n      setApiErrorModalOpen(false);\r\n    }\r\n  }, [errorApiInfo]);\r\n  return (\r\n    <JobManagerBoxWrap>\r\n      <h2>취업담당자 안내</h2>\r\n      <div className=\"jobmanager-content\">\r\n        {mngProfiledata?.map(item => (\r\n          <div className=\"manager-profile\" key={item.iemply}>\r\n            <img\r\n              // src={`/home/download/Employee/${item.iemply}/${item.profilePic}`}\r\n              src={`${item.profilePic}`}\r\n              alt=\"job manager\"\r\n              onError={onImgError}\r\n              className=\"manager-img\"\r\n            />\r\n            <div className=\"manager-details\">\r\n              <p className=\"manager-word\">{item.oneWord}</p>\r\n              <p className=\"manager-name\">{item.name} 취업지원실장</p>\r\n              <ul className=\"manager-contact\">\r\n                <li>\r\n                  <span>상담전화</span>\r\n                  <span>{item.counselingNumber}</span>\r\n                </li>\r\n                <li>\r\n                  <span>모바일</span>\r\n                  <span>{item.phoneNumber}</span>\r\n                </li>\r\n                <li>\r\n                  <span>이메일</span>\r\n                  <span>{item.email}</span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {nothing && <div>취업담당자의 정보가 없습니다.</div>}\r\n\r\n      {/* api 에러 확인모달 */}\r\n      {apiErrorModalOpen && (\r\n        <OkModal\r\n          header={\"\"}\r\n          open={apiErrorModalOpen}\r\n          close={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n          onConfirm={() => {\r\n            setApiErrorModalOpen(false);\r\n            setErrorApiInfo(\"\");\r\n          }}\r\n        >\r\n          <span>{errorApiInfo}</span>\r\n        </OkModal>\r\n      )}\r\n    </JobManagerBoxWrap>\r\n  );\r\n};\r\n\r\nexport default JobManagerList;\r\n","import { client } from \"./client\";\r\n\r\nexport const getJobManagerInfo = async ({\r\n  setmngProflieData,\r\n  setNothing,\r\n  setErrorApiInfo,\r\n}) => {\r\n  try {\r\n    const res = await client.get(`/company/employee`);\r\n    const result = await res.data;\r\n\r\n    console.log(\"job mng 정보 들어옴\", result);\r\n    setmngProflieData(result);\r\n    setNothing(false);\r\n    if (result.length === 0) {\r\n      setNothing(true);\r\n      console.log(\"결과 없어요\");\r\n    }\r\n    return result;\r\n  } catch (error) {\r\n    setErrorApiInfo(`JobManager Info: ${error.message}`);\r\n  }\r\n};\r\n"],"names":["client","axios","create","baseURL","headers","interceptors","request","use","async","token","getCookie","console","log","config","Authorization","concat","error","Promise","reject","response","refreshToken","status","_config$headers","data","post","accessToken","setAcessCookie","fetchLogin","userId","password","setErrorCancelInfo","res","email","pw","role","vo","accessTokenTime","Error","setRefresCookie","postLogout","removeCookie","_ref","header","open","close","onConfirm","children","_jsx","ConfirmModalWarp","onClick","className","_jsxs","e","stopPropagation","src","process","alt","ModalOkBtn","JobManagerBoxWrap","styled","div","_templateObject","_taggedTemplateLiteral","Maincolor","black","grayLight2","JobManagerList","mngProfiledata","setmngProflieData","useState","nothing","setNothing","apiErrorModalOpen","setApiErrorModalOpen","errorApiInfo","setErrorApiInfo","onImgError","target","NoImage","useEffect","get","result","length","message","getJobManagerInfo","map","item","profilePic","onError","oneWord","name","counselingNumber","phoneNumber","iemply","OkModal"],"sourceRoot":""}